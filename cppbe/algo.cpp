//
// Created by admin on 15/09/18.
//

#include "algo.h"

/*
//uint8_t cR[] = {1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,0};
uint8_t cG[] = {1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,0};
uint8_t cB[] = {1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,0};
*/

float cor(fftwf_complex af[512], uint8_t pixData[512], fftwf_complex out[512]) {
    float diffs[512] = {0.0f};

    diffs[0]   = 0.0f;
    diffs[511] = 0.0f;

    for(size_t i = 1; i < 511; i++) {
        float delta = (pixData[i + 1] - pixData[i - 1]) / 2.0f;
        diffs[i] = delta > 1.0f ? 1.0f : (delta < -1.0f ? -1.0f : delta);
    }

    fftwf_complex cDiff[512] = {{0,0}};
    for(size_t i = 0; i < 512; i++) {
        cDiff[i][0] = diffs[i];
        cDiff[i][1] = 0.0f;
    }

    fftwf_plan planf = fftwf_plan_dft_1d(510, cDiff, out, FFTW_FORWARD, FFTW_ESTIMATE);
    fftwf_execute(planf);

    for(size_t i = 0; i < 512; i++) {
        float t   = out[i][1] * af[i][1] - out[i][0] * af[i][0];
        out[i][1] = out[i][0] * af[i][1] + out[i][1] * af[i][0];
        out[i][0] = t;
    }

    fftwf_plan planb = fftwf_plan_dft_1d(510, out, cDiff, FFTW_BACKWARD, FFTW_ESTIMATE);
    fftwf_execute(planb);

    for(size_t i = 0; i < 512; i++) {
        cDiff[i][0] = -cDiff[i][0]/509;
    }

    float max = -INFINITY;
    for (float *diff : cDiff) {
        if(diff[0] > max) { max = diff[0]; }
    }

    return max;
}

void precompute(uint8_t inp[512], fftwf_complex out[512]) {
    float diffs[512];

    diffs[0]   = 0;
    diffs[511] = 0;

    for(size_t i = 1; i < 511; i++) {
        float delta = (inp[i + 1] - inp[i - 1]) / 2.0f;
        diffs[i] = delta;
    }

    fftwf_complex cDiff[512];
    for(size_t i = 0; i < 512; i++) {
        cDiff[i][0] = diffs[i];
        cDiff[i][1] = 0;
    }

    fftwf_plan planf = fftwf_plan_dft_1d(510, cDiff, out, FFTW_FORWARD, FFTW_ESTIMATE);
    fftwf_execute(planf);

    for(size_t i = 0; i < 511; i++) {
        out[i][1] *= -1;
    }
}

